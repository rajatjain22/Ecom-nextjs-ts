generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id               String    @id @default(cuid())
  firstName        String    @db.VarChar(255)
  lastName         String?   @db.VarChar(255)
  email            String    @unique
  password         String    @db.VarChar(255)
  mobile           String?   @db.VarChar(10)
  role             Role      @default(user)
  district         String?   @db.VarChar(255)
  state            String?   @db.VarChar(255)
  profile          String?   @db.VarChar(255)
  resetToken       String?   @db.VarChar(255)
  resetTokenExpiry DateTime?
  otp              String?   @db.VarChar(255)
  otpExpiry        DateTime?
  isActive         Boolean   @default(true)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @default(now()) @updatedAt

  images           Image[]
  orders           Order[]
}

model Product {
  id          String            @id @default(cuid())
  title       String            @db.VarChar(255)
  description String?           @db.Text
  handle      String            @unique @db.VarChar(255)
  productType String?           @db.VarChar(100)
  quantity    Int               @default(0)
  price       Decimal           @default(0.00) @db.Decimal(10, 2)
  discount    Decimal?          @db.Decimal(5, 2)
  tax         Decimal?          @db.Decimal(5, 2)
  isActive    Boolean           @default(false)
  sku         String?           @db.VarChar(50)
  tags        String?           @db.VarChar(50)
  barcode     String?           @db.VarChar(255)
  weight      Decimal?          @db.Decimal(10, 2)
  weightType  String?           @db.VarChar(50)
  brandId     String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @default(now()) @updatedAt
  images      Image[]
  brand       ProductBrand?     @relation(fields: [brandId], references: [id])
  categories  ProductCategory[]
  options     ProductOption[]
  reviews     ProductReview[]
  variants    ProductVariant[]
  orderItems  OrderItem[]

  @@index([brandId], map: "Product_brandId_fkey")
}

model Image {
  id               String          @id @default(cuid())
  url              String          @db.VarChar(255)
  alt              String?         @db.VarChar(255)
  name             String?
  size             Int?
  mimeType         String?
  isPrimary        Boolean         @default(false)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  productId        String?
  userId           String?
  productVariantId String?
  product          Product?        @relation(fields: [productId], references: [id])
  productVariant   ProductVariant? @relation(fields: [productVariantId], references: [id])
  user             Users?          @relation(fields: [userId], references: [id])

  @@index([productId], map: "Image_productId_fkey")
  @@index([productVariantId], map: "Image_productVariantId_fkey")
  @@index([userId], map: "Image_userId_fkey")
}

model ProductReview {
  id        String   @id @default(cuid())
  productId String
  rating    Int
  comment   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])

  @@index([productId], map: "ProductReview_productId_fkey")
}

model ProductOption {
  id        String               @id @default(cuid())
  productId String
  name      String               @db.VarChar(100)
  position  Int?
  product   Product              @relation(fields: [productId], references: [id], onDelete: Cascade)
  values    ProductOptionValue[]

  @@index([productId], map: "ProductOption_productId_fkey")
}

model ProductOptionValue {
  id       String        @id @default(cuid())
  optionId String
  value    String        @db.VarChar(255)
  option   ProductOption @relation(fields: [optionId], references: [id])

  @@index([optionId], map: "ProductOptionValue_optionId_fkey")
}

model ProductCategory {
  id        String  @id @default(cuid())
  productId String
  value     String  @db.VarChar(255)
  product   Product @relation(fields: [productId], references: [id])

  @@index([productId], map: "ProductCategory_productId_fkey")
}

model ProductBrand {
  id       String    @id @default(cuid())
  name     String    @unique @db.VarChar(255)
  products Product[]
}

model ProductVariant {
  id              String   @id @default(cuid())
  productId       String
  title           String   @db.VarChar(255)
  price           Decimal? @db.Decimal(10, 2)
  position        Int      @default(1)
  sku             String?  @unique @db.VarChar(100)
  option1         String?
  option2         String?
  option3         String?
  quantityInStock Int      @default(0)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  images          Image[]
  product         Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItems      OrderItem[]

  @@index([productId], map: "ProductVariant_productId_fkey")
}

enum Role {
  superadmin
  admin
  user
}

model Order {
  id              String          @id @default(cuid())
  userId          String
  orderNumber     String          @unique @db.VarChar(255)
  status          OrderStatus     @default(pending)
  totalAmount     Decimal         @db.Decimal(10, 2)
  paymentStatus   PaymentStatus   @default(pending)
  shippingAddress String?
  billingAddress  String?
  placedAt        DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  items           OrderItem[]
  user            Users           @relation(fields: [userId], references: [id])
  payments        Payment[]
  refunds         Refund[]

  @@index([userId], map: "Order_userId_fkey")
}

model OrderItem {
  id              String       @id @default(cuid())
  orderId         String
  productId       String
  productVariantId String?
  productName     String       @db.VarChar(255)
  quantity        Int          @default(1)
  price            Decimal        @default(0.00) @db.Decimal(10, 2) // Set a default value
  totalPrice       Decimal        @db.Decimal(10, 2) // quantity * unitPrice
  product          Product        @relation(fields: [productId], references: [id])
  productVariant   ProductVariant? @relation(fields: [productVariantId], references: [id])
  order           Order        @relation(fields: [orderId], references: [id])
  refunds         Refund[]

  @@index([orderId], map: "OrderItem_orderId_fkey")
  @@index([productId], map: "OrderItem_productId_fkey")
  @@index([productVariantId], map: "OrderItem_productVariantId_fkey") // Index for productVariantId
}

model Payment {
  id             String       @id @default(cuid())
  orderId        String
  amount         Decimal      @db.Decimal(10, 2)
  paymentStatus  PaymentStatus
  paymentMethod  PaymentMethod?
  paymentDate    DateTime     @default(now())
  transactionId  String?      @db.VarChar(255)
  order          Order        @relation(fields: [orderId], references: [id])

  @@index([orderId], map: "Payment_orderId_fkey")
}

model Refund {
  id              String       @id @default(cuid())
  orderId         String
  orderItemId     String?
  reason          String       @db.Text
  status          RefundStatus @default(pending)
  amount          Decimal      @default(0.00) @db.Decimal(10, 2)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  order           Order        @relation(fields: [orderId], references: [id])
  orderItem       OrderItem?   @relation(fields: [orderItemId], references: [id])
}

enum PaymentMethod {
  credit_card
  debit_card
  paypal
  cash_on_delivery
  bank_transfer
  upi
}

enum OrderStatus {
  pending
  processing
  shipped
  delivered
  canceled
  refunded
  returned
}

enum RefundStatus {
  pending
  approved
  rejected
  completed
}

enum PaymentStatus {
  pending
  completed
  failed
  refunded
}
